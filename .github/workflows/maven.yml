#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Java CI with Maven

on:
  push:
    branches:
      - alpha
      - beta
      - development
      - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/build.sh') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: chmod +x ./build.sh && ./build.sh

      - name: Get branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

      - run:   echo "REPOSITORY_NAME=`echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//"`" >> $GITHUB_ENV
        shell: bash

      - name: Get version tag
        run: echo "##[set-output name=version;]$(echo `git ls-remote https://${{ secrets.my_pat }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ steps.get_branch.outputs.branch }} | awk '{ print $1}' | cut -c1-7`)abcd"
        id: get_version

      - name: Set up Buildx 
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.my_pat }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ steps.get_branch.outputs.branch }}:latest
            ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ steps.get_branch.outputs.branch }}:${{ steps.get_version.outputs.version }}
     
      - name: Check out into atlan-v2 repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
          repository: atlanhq/atlan-v2
          token: ${{ secrets.my_pat }}

      - name: Get previous tag from atlan-v2 repo
        id: get_latest_tag
        run: |
          repo_branch=${{ steps.get_branch.outputs.branch }}
          if [[ "$repo_branch" == "master" ]]; then
            charts_tag="staging"
          else 
            charts_tag="$repo_branch"
          fi
          echo "##[set-output name=charts_tag;]$(echo $charts_tag)"
          tag=$(git tag | grep "\<$charts_tag\>" | sort -V | grep 'v[0-9].*' | tail -1)
          echo "##[set-output name=tag;]$(git tag | grep "\<$charts_tag\>" | sort -V | grep 'v[0-9].*' | tail -1)"
          if echo $tag | grep "999"; then
              echo "##[set-output name=command;]$(echo 'm')"
          else
              echo "##[set-output name=command;]$(echo 'p')"
          fi
        shell: bash

      - name: Get new tag by doing semver version bump
        id: bump_tag
        run: |
          chmod +x ./scripts/semver-version-upgrade.sh
          bumped_tag=$(./scripts/semver-version-upgrade.sh -${{ steps.get_latest_tag.outputs.command }} ${{ steps.get_latest_tag.outputs.tag }})
          echo "##[set-output name=new_tag;]$(echo $bumped_tag)"
          
      - name: Create Release on atlan-v2 repo
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.my_pat }}
        with:
          tag_name: ${{ steps.bump_tag.outputs.new_tag }}-${{ steps.get_latest_tag.outputs.charts_tag }}
          release_name: ${{ github.event.repository.name }}
          body: |
            ${{ github.event.head_commit.message }}
            Commit id - ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          owner: atlanhq
          repo: atlan-v2
          commitish: ${{ steps.get_latest_tag.outputs.charts_tag }}

      - name: Check out into atlan repo
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_branch.outputs.branch }}
          repository: atlanhq/atlan
          token: ${{ secrets.my_pat }}

      - name: Add Changelog
        run: |
          mkdir -p gitlog
          echo "- ${{ github.event.head_commit.message }}">>gitlog/${{ github.event.repository.name }}.txt
          chmod +x ./scripts/create_changelog.sh
          ./scripts/create_changelog.sh
          git add .
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "${{ github.event.repository.name }}"
          git push origin

